<?php/** * @package App Image Uploader *//*Plugin name: App Image UploaderPlugin URI: https://www.cheenti.com/Description: To Manage app banner images.Version: 1.0Author: Sayan MajumdarAuthor URI: https://www.cheenti.com/License: GPLv2 or laterText Domain: app-image-uploader*//* * This plugin is built for uploading android app banner images & it is a free software to use. Copyright Â© 2022 Cheenti Digital LLC. */defined( 'ABSPATH' ) or die( 'Hey it is just a plugin' );if ( file_exists( dirname( __FILE__ ) . '/vendor/autoload.php' ) ) {	require_once dirname( __FILE__ ) . '/vendor/autoload.php';}// Including cmb2 libraryif ( file_exists( dirname( __FILE__ ) . '/cmb2/init.php' ) ) {	require_once dirname( __FILE__ ) . '/cmb2/init.php';} elseif ( file_exists( dirname( __FILE__ ) . '/CMB2/init.php' ) ) {	require_once dirname( __FILE__ ) . '/CMB2/init.php';}// Import a class via composer namespacesuse Inc\Activate;// Import a class via composer namespacesuse Inc\Deactivate;if ( ! class_exists( 'appimageuploader_plugin' ) ) {	class appimageuploader_plugin {		// Basically used for global(we can put action hooks)		public $plugin;		function __construct() {			$this->plugin = plugin_basename( __FILE__ );		}		// Function called register to handle style scripts separately and not during the initialization(we can put action hooks)		function register() {			// Plugin Menus			add_action( 'admin_menu', array( $this, 'add_admin_pages' ) );			// Settings init() with the admin_init hook			add_action( 'admin_init', array( $this, 'settings_init' ) );			// Including Settings Page template			add_action( 'init', array( $this, 'settings_page' ) );			// Plugin action links			add_filter( "plugin_action_links_$this->plugin", array( $this, 'settings_link' ) );			// For Plugin activation redirection			add_action( 'admin_init', array( $this, 'plugin_redirect' ) );			// For enqueueing admin styles			add_action( 'admin_enqueue_scripts', array( $this, 'backend_enqueue' ) );			// For Custom Post Type			add_action( 'init', array( $this, 'cpt' ) );			// For Custom Post Type Taxonomy			add_action( 'init', array( $this, 'cpt_type' ) );			// For custom meta boxes			add_action( 'cmb2_admin_init', array( $this, 'appimageuploader_register_repeatable_group_field_metabox' ) );		}		// To create Plugin menu		public function add_admin_pages() {			add_menu_page( 'App Image Uploader', 'App Manager', 'manage_options', 'app-image-uploader', '', 'dashicons-smartphone', 110 );			//Moving your Custom Post Type Taxonomy menu-name under your plugin-menu			/* CPT */			$cpt = 'banner_images';			/* Get CPT Object */			$cpt_obj = get_post_type_object( $cpt );			add_submenu_page(				'app-image-uploader', // parent slug				$cpt_obj->labels->name, // page title				'Types', // menu title				$cpt_obj->cap->edit_posts, // capability				'edit-tags.php?taxonomy=banner_images_type&post_type=banner_images'			);			add_submenu_page( 'app-image-uploader', 'Settings Page', 'Settings', 'manage_options', 'app-image-uploader-settings', 'settings_callback', 111, array(				$this,				'settings_page'			), null );			add_submenu_page( 'app-image-uploader', 'App Notification Page', 'App Notification', 'manage_options', 'app-image-uploader-notification', array(				$this,				'notification_page'			), null );			add_submenu_page( 'app-image-uploader', 'App Notification View Page', 'App Notification View', 'manage_options', 'app-image-uploader-notification-view', array(				$this,				'notification_view_page'			), null );		}		/*		* ********************************		* For Settings Page		* ********************************		* */		public static function settings_init() {			// Setup settings section			add_settings_section(				'settings_section',//slug section				'Settings Page',//title				'',				'app-image-uploader-settings'//menu settings page slug			);			// Register checkbox			register_setting(				'app-image-uploader-settings',//menu settings page slug				'app-image-uploader-settings_checkbox'//register settings slug			);			// Register input field for android version			register_setting(				'app-image-uploader-settings',//menu settings page slug				'app_version_control_android',//register settings slug				array(					'type'              => 'string',					'sanitize_callback' => 'sanitize_text_field',					'default'           => ''				) );			// Register input field for ios version			register_setting(				'app-image-uploader-settings',//menu settings page slug				'app_version_control_ios',//register settings slug				array(					'type'              => 'string',					'sanitize_callback' => 'sanitize_text_field',					'default'           => ''				));			// Add checkbox			add_settings_field(				'app-image-uploader-settings_checkbox',//register settings slug				__( 'Activate Image Uploader Fields', 'my-textdomain' ),//input field title and text-domain				'checkbox_callback_page',//callback function name(settings.php)				'app-image-uploader-settings',//menu settings page slug				'settings_section'//settings section id			);			// Add number field for android version control			add_settings_field(				'app_version_control_android',//register settings slug				__( 'Set Version Android', 'my-textdomain' ),//input field title and textdomain				'app_version_android_input_field_callback',//callback function name(settings.php)				'app-image-uploader-settings',//menu settings page slug				'settings_section'//settings section id			);			// Add number field for IOS version control			add_settings_field(				'app_version_control_ios',//register settings slug				__( 'Set Version IOS', 'my-textdomain' ),//input field title and textdomain				'app_version_ios_input_field_callback',//callback function name(settings.php)				'app-image-uploader-settings',//menu settings page slug				'settings_section'//settings section id			);		}		// To include the template for settings page		public function settings_page() {			// Require page template(HTML STRUCTURES OF YOUR PLUGIN ADMIN PAGE)			require_once plugin_dir_path( __FILE__ ) . 'templates/settings.php';		}		// To include the template for settings page		public function notification_page() {			// Require page template(HTML STRUCTURES OF YOUR PLUGIN ADMIN PAGE)			require_once plugin_dir_path( __FILE__ ) . 'templates/app-notification.php';		}		public function notification_view_page() {			// Require page template(HTML STRUCTURES OF YOUR PLUGIN ADMIN PAGE)			require_once plugin_dir_path( __FILE__ ) . 'templates/app-notification-view.php';		}		// To link settings menu with the required php page		public function settings_link( $links ) {			$settings_link = '<a href="admin.php?page=app-image-uploader-settings">Settings</a>';			array_push( $links, $settings_link );			return $links;		}		// Function to redirect to my plugin admin menu on activation		function plugin_redirect() {			if ( get_option( 'app-image-uploader_do_activation_redirect', false ) ) {				delete_option( 'app-image-uploader_do_activation_redirect' );				if ( ! isset( $_GET['activate-multi'] ) ) {					//redirection url					wp_redirect( "edit.php?post_type=banner_images" );				}			}		}		// To load styles for the back-end		function backend_enqueue() {			wp_enqueue_style( 'imguploader', plugin_dir_url( __FILE__ ) . '/assets/css/imguploader-custom.css' );		}		// Custom post type Banner Images		function cpt() {			/**			 * Post Type: Banner.			 */			$labels = [				"name" => __( "Banner Images", "custom-post-type-ui" ),				"singular_name" => __( "Banner Images", "custom-post-type-ui" ),			];			$args = [				"label" => __( "Banner Images", "custom-post-type-ui" ),				"labels" => $labels,				"description" => "",				"public" => true,				"publicly_queryable" => true,				"show_ui" => true,				"show_in_rest" => true,				"rest_base" => "",				"rest_controller_class" => "WP_REST_Posts_Controller",				"has_archive" => true,				"show_in_menu" => 'app-image-uploader',				"show_in_nav_menus" => true,				"delete_with_user" => false,				"exclude_from_search" => false,				"capability_type" => "post",				"map_meta_cap" => true,				"hierarchical" => true,				"rewrite" => false,				"query_var" => true,				"menu_icon" => "",				"supports" => [ "title" ],				"show_in_graphql" => false,				'menu_position' => 100			];			register_post_type( "banner_images", $args );		}		// Banner Images type taxonomoy		function cpt_type() {			/**			 * Taxonomy: Types.			 */			$labels = [				"name" => __( "Types", "custom-post-type-ui" ),				"singular_name" => __( "Type", "custom-post-type-ui" ),			];			$args = [				"label" => __( "Types", "custom-post-type-ui" ),				"labels" => $labels,				"public" => true,				"publicly_queryable" => true,				"hierarchical" => true,				"show_ui" => true,				"show_in_menu" => false,				"show_in_nav_menus" => true,				"query_var" => true,				"rewrite" => [ 'slug' => 'banner_images_type', 'with_front' => true, ],				"show_admin_column" => true,				"show_in_rest" => true,				"rest_base" => "banner_images_type",				"rest_controller_class" => "WP_REST_Terms_Controller",				"show_in_quick_edit" => true,				"show_in_graphql" => false,			];			register_taxonomy( "banner_images_type", [ "banner_images" ], $args );		}		// To include the meta boxes		function appimageuploader_register_repeatable_group_field_metabox() {			$prefix = 'schwabe_';// To set your unique prefix			$url = plugin_dir_url( dirname( __FILE__ ) ); // To set the plugin folder url			/**			 * Repeatable Field Groups			 */			$condition = get_option( 'app-image-uploader-settings_checkbox' ) ? 'checked' : '';			if ( $condition == true ) {				$cmb_group = new_cmb2_box( array(					'id' => $prefix . 'app_banner_metabox',					'title' => esc_html__( 'App Image Uploader', 'cmb2' ),					'object_types' => array( 'banner_images' ),				) );				// Creating the group field options				$group_field_id = $cmb_group->add_field( array(					'id' => $prefix . 'app_banner',					'type' => 'group',					'description' =>						'<div class="schwabe-panel-box" id="parent">                         <img style="width: 20px;vertical-align: middle;" src="' . $url . 'app-image-uploader/assets/images/schwabe-logo.png">                          Manage Your App Banner Images.                         </div>                         <div id="schwabe-settings-border"></div>',					'options' => array(						'group_title' => esc_html__( 'Image {#}', 'cmb2' ),						// {#} Gets replaced by row number						'add_button' => esc_html__( 'Add', 'cmb2' ),						'remove_button' => esc_html__( 'Remove', 'cmb2' ),						'sortable' => true,						'closed' => true,						// True to have the groups closed by default						'remove_confirm' => esc_html__( 'Are you sure you want to remove?', 'cmb2' ),						// Performs confirmation before removing group.					),				) );				/**				 * Group fields works the same, except ids only need				 * to be unique to the group. Prefix is not needed.				 *				 * The parent field's id needs to be passed as the first argument.				 */				// For tittle meta box				$cmb_group->add_group_field( $group_field_id, array(					'name' => esc_html__( 'Title', 'cmb2' ),					'description' => esc_html__( 'Write a title.', 'cmb2' ),					'id' => $prefix . 'banner_title',					'type' => 'text',				) );				// For description meta box				$cmb_group->add_group_field( $group_field_id, array(					'name' => esc_html__( 'Description', 'cmb2' ),					'description' => esc_html__( 'Write a short description.', 'cmb2' ),					'id' => $prefix . 'banner_description',					'type' => 'textarea_small',				) );				// For radio				$cmb_group->add_group_field( $group_field_id, array(					'name'    => 'Select',					'id'      => $prefix . 'banner_target_type',					'type'    => 'radio',					'options' => array(						'product'  => __( 'product', 'cmb2' ),						'category' => __( 'category', 'cmb2' ),					),				) );				// For text box				$cmb_group->add_group_field( $group_field_id, array(					'name' => 'Target id',					'desc' => 'Put the id here',					'id'   => $prefix . 'banner_target_id',					'type' => 'text',				) );				// For Image meta box				$cmb_group->add_group_field( $group_field_id, array(					'name' => esc_html__( 'Image', 'cmb2' ),					'desc' => esc_html__( 'Upload an image or enter a URL.', 'cmb2' ),					'id' => $prefix . 'banner_image',					'type' => 'file',				) );			}		}		function activate() {			// Access static methods of class			Activate::activate();		}		function deactivate() {			// Access static methods of class			Deactivate::deactivate();		}	}}if ( class_exists( 'appimageuploader_plugin' ) ) {	$appimageuploader_plugin = new appimageuploader_plugin( 'Plugin initialized' ); // Initializing the class called appimageuploader_plugin	$appimageuploader_plugin->register(); // Triggering register method inside the class}// Activation Hookregister_activation_hook( __FILE__, array( $appimageuploader_plugin, 'activate' ) );// Deactivation Hookregister_deactivation_hook( __FILE__, array( $appimageuploader_plugin, 'deactivate' ) );